# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2010-10-19T01:52:18\n"
"PO-Revision-Date: 2010-10-19T01:52:18\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Portable extensions"
msgstr ""

#. Tag: para
#, no-c-format
msgid "CDI is intended to be a foundation for frameworks, extensions and integration with other technologies. Therefore, CDI exposes a set of SPIs for the use of developers of portable extensions to CDI. For example, the following kinds of extensions were envisaged by the designers of CDI:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "integration with Business Process Management engines,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "integration with third-party frameworks such as Spring, Seam, GWT or Wicket, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid "new technology based upon the CDI programming model."
msgstr ""

#. Tag: para
#, no-c-format
msgid "More formally, according to the spec:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A portable extension may integrate with the container by:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Providing its own beans, interceptors and decorators to the container"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Injecting dependencies into its own objects using the dependency injection service"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Providing a context implementation for a custom scope"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Augmenting or overriding the annotation-based metadata with metadata from some other source"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Creating an <literal>Extension</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The first step in creating a portable extension is to write a class that implements <literal>Extension</literal>. This marker interface does not define any methods, but it's needed to satisfy the requirements of Java SE's service provider architecture."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Next, we need to register our extension as a service provider by creating a file named <literal>META-INF/services/javax.enterprise.inject.spi.Extension</literal>, which contains the name of our extension class:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "An extension is not a bean, exactly, since it is instantiated by the container during the initialization process, before any beans or contexts exist. However, it can be injected into other beans once the initialization process is complete."
msgstr ""

#. Tag: para
#, no-c-format
msgid "And, like beans, extensions can have observer methods. Usually, the observer methods observe <emphasis>container lifecycle events</emphasis>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Container lifecycle events"
msgstr ""

#. Tag: para
#, no-c-format
msgid "During the initialization process, the container fires a series of events, including:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>BeforeBeanDiscovery</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>ProcessAnnotatedType</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>ProcessInjectionTarget</literal> and <literal>ProcessProducer</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>ProcessBean</literal> and <literal>ProcessObserverMethod</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>AfterBeanDiscovery</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>AfterDeploymentValidation</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Extensions may observe these events:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In fact, the extension can do a lot more than just observe. The extension is permitted to modify the container's metamodel and more. Here's a very simple example:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The observer method may inject a <literal>BeanManager</literal>"
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>BeanManager</literal> object"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The nerve center for extending CDI is the <literal>BeanManager</literal> object. The <literal>BeanManager</literal> interface lets us obtain beans, interceptors, decorators, observers and contexts programmatically."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Any bean or other Java EE component which supports injection can obtain an instance of <literal>BeanManager</literal> via injection:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Java EE components may obtain an instance of <literal>BeanManager</literal> from JNDI by looking up the name <literal>java:comp/BeanManager</literal>. Any operation of <literal>BeanManager</literal> may be called at any time during the execution of the application."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let's study some of the interfaces exposed by the <literal>BeanManager</literal>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>InjectionTarget</literal> interface"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The first thing that a framework developer is going to look for in the portable extension SPI is a way to inject CDI beans into objects which are not under the control of CDI. The <literal>InjectionTarget</literal> interface makes this very easy."
msgstr ""

#. Tag: para
#, no-c-format
msgid "We recommend that frameworks let CDI take over the job of actually instantiating the framework-controlled objects. That way, the framework-controlled objects can take advantage of constructor injection. However, if the framework requires use of a constructor with a special signature, the framework will need to instatiate the object itself, and so only method and field injection will be supported."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>Bean</literal> interface"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Instances of the interface <literal>Bean</literal> represent beans. There is an instance of <literal>Bean</literal> registered with the <literal>BeanManager</literal> object for every bean in the application. There are even <literal>Bean</literal> objects representing interceptors, decorators and producer methods."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>Bean</literal> interface exposes all the interesting things we dicussed in <xref linkend=\"bean-anatomy\"/>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "There's an easy way to find out what beans exist in the application:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>Bean</literal> interface makes it possible for a portable extension to provide support for new kinds of beans, beyond those defined by the CDI specification. For example, we could use the <literal>Bean</literal> interface to allow objects managed by another framework to be injected into beans."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Registering a <literal>Bean</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The most common kind of CDI portable extension registers a bean (or beans) with the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example, we make a framework class, <literal>SecurityManager</literal> available for injection. To make things a bit more interesting, we're going to delegate back to the container's <literal>InjectionTarget</literal> to perform instantiation and injection upon the <literal>SecurityManager</literal> instance."
msgstr ""

#. Tag: para
#, no-c-format
msgid "But a portable extension can also mess with beans that are discovered automatically by the container."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Wrapping an <literal>AnnotatedType</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "One of the most interesting things that an extension class can do is process the annotations of a bean class <emphasis>before</emphasis> the container builds its metamodel."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let's start with an example of an extension that provides support for the use of <literal>@Named</literal> at the package level. The package-level name is used to qualify the EL names of all beans defined in that package. The portable extension uses the <literal>ProcessAnnotatedType</literal> event to wrap the <literal>AnnotatedType</literal> object and override the <literal>value()</literal> of the <literal>@Named</literal> annotation."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here's a second example, which adds the <literal>@Alternative</literal> annotation to any class which implements a certain <literal>Service</literal> interface."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>AnnotatedType</literal> is not the only thing that can be wrapped by an extension."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Wrapping an <literal>InjectionTarget</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>InjectionTarget</literal> interface exposes operations for producing and disposing an instance of a component, injecting its dependencies and invoking its lifecycle callbacks. A portable extension may wrap the <literal>InjectionTarget</literal> for any Java EE component that supports injection, allowing it to intercept any of these operations when they are invoked by the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here's a CDI portable extension that reads values from properties files and configures fields of Java EE components, including servlets, EJBs, managed beans, interceptors and more. In this example, properties for a class such as <literal>org.mydomain.blog.Blogger</literal> go in a resource named <literal>org/mydomain/blog/Blogger.properties</literal>, and the name of a property must match the name of the field to be configured. So <literal>Blogger.properties</literal> could contain:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The portable extension works by wrapping the containers <literal>InjectionTarget</literal> and setting field values from the <literal>inject()</literal> method."
msgstr ""

#. Tag: para
#, no-c-format
msgid "There's a lot more to the portable extension SPI than what we've discussed here. Check out the CDI spec or Javadoc for more information. For now, we'll just mention one more extension point."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>Context</literal> interface"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>Context</literal> interface supports addition of new scopes to CDI, or extension of the built-in scopes to new environments."
msgstr ""

#. Tag: para
#, no-c-format
msgid "For example, we might implement <literal>Context</literal> to add a business process scope to CDI, or to add support for the conversation scope to an application that uses Wicket."
msgstr ""

