# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2010-10-19T01:52:18\n"
"PO-Revision-Date: 2010-10-19T01:52:18\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "JSF web application example"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let's illustrate these ideas with a full example. We're going to implement user login/logout for an application that uses JSF. First, we'll define a request-scoped bean to hold the username and password entered during login, with constraints defined using annotations from the Bean Validation specification:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This bean is bound to the login prompt in the following JSF form:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Users are represented by a JPA entity:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "(Note that we're also going to need a <literal>persistence.xml</literal> file to configure the JPA persistence unit containing <literal>User</literal>.)"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The actual work is done by a session-scoped bean that maintains information about the currently logged-in user and exposes the <literal>User</literal> entity to other beans:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>@LoggedIn</literal> and <literal>@UserDatabase</literal> are custom qualifier annotations:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "We need an adaptor bean to expose our typesafe <literal>EntityManager</literal>:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now <literal>DocumentEditor</literal>, or any other bean, can easily inject the current user:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Or we can reference the current user in a JSF view:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Hopefully, this example gave you a taste of the CDI programming model. In the next chapter, we'll explore dependency injection in greater depth."
msgstr ""

